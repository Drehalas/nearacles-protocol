name: Security Checks

on:
  push:
    branches: [ main, develop, 'fix/*', 'feature/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: |
        npm install --package-lock-only
        npm ci

    - name: Run npm audit
      run: npm audit --audit-level high
      continue-on-error: true

    - name: Generate audit report
      run: |
        npm audit --json > audit-report.json
        npm audit --audit-level moderate --dry-run || echo "Vulnerabilities found"

    - name: Upload audit report
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-report
        path: audit-report.json

  frontend-security:
    name: Frontend Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: |
        npm install --package-lock-only
        npm ci

    - name: Run frontend npm audit
      working-directory: ./frontend
      run: npm audit --audit-level high
      continue-on-error: true

  secrets-scan:
    name: Secrets Scanning
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy secrets scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-secrets.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '1'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-secrets.sarif'

  sast-analysis:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: typescript, javascript

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: |
        npm install --package-lock-only
        npm ci

    - name: Build project
      run: npm run build

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:typescript"

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies
      run: |
        npm install --package-lock-only
        npm ci

    - name: Check licenses
      run: |
        npx license-checker --summary
        npx license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;CC0-1.0'

  docker-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'

  security-policy-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for security policy
      run: |
        if [ ! -f SECURITY.md ] && [ ! -f .github/SECURITY.md ]; then
          echo "❌ No SECURITY.md file found"
          exit 1
        else
          echo "✅ Security policy found"
        fi

    - name: Check for security headers configuration
      run: |
        # Check if security headers are configured
        if [ -f "frontend/middleware.ts" ]; then
          if grep -q "X-Frame-Options\|Content-Security-Policy\|X-Content-Type-Options" frontend/middleware.ts; then
            echo "✅ Security headers configured"
          else
            echo "❌ Security headers not configured in middleware"
            exit 1
          fi
        else
          echo "❌ No middleware.ts found for security headers"
          exit 1
        fi
