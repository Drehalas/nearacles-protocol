# NEAR Oracle Intent Protocol - Frontend Testnet Dockerfile
# Optimized for testnet deployment with debugging capabilities

# Use Node.js 18 LTS for stability
FROM node:22-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies based on the preferred package manager
COPY frontend/package.json frontend/package-lock.json* ./
RUN npm ci --only=production

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY frontend/ .

# Create testnet environment file
COPY frontend/.env.testnet .env.local

# Set build-time environment variables for testnet
ENV NODE_ENV=production
ENV NEXT_PUBLIC_DEPLOYMENT_ENV=testnet
ENV NEXT_PUBLIC_ENVIRONMENT=testnet

# Build the application
RUN npm run build:testnet

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_PUBLIC_DEPLOYMENT_ENV=testnet

# Create nextjs user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=builder /app/out ./out
COPY --from=builder /app/public ./public

# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs .next

# Copy package.json for production dependencies
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./package.json

USER nextjs

# Expose port
EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Health check for testnet deployment
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Simple static file server for serving built files
FROM node:22-alpine AS static-server
WORKDIR /app

# Install a simple HTTP server
RUN npm install -g serve

# Copy built static files
COPY --from=builder /app/out ./public

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1

# Serve static files
CMD ["serve", "-s", "public", "-l", "3000"]
