# NGINX Load Balancer Configuration for NEAR Oracle Intent Protocol Testnet
# Handles load balancing for WebSocket services and HTTP requests

# WebSocket upstream servers
upstream websocket_backend {
    # Primary WebSocket server
    server localhost:8080 weight=3 max_fails=3 fail_timeout=30s;
    
    # Additional WebSocket servers (for scaling)
    # server localhost:8081 weight=2 max_fails=3 fail_timeout=30s;
    # server localhost:8082 weight=1 max_fails=3 fail_timeout=30s backup;
    
    # Load balancing method: ip_hash ensures client stickiness for WebSocket connections
    ip_hash;
}

# Frontend upstream servers
upstream frontend_backend {
    server localhost:3000 weight=1 max_fails=3 fail_timeout=30s;
    
    # Additional frontend servers (for scaling)
    # server localhost:3001 weight=1 max_fails=3 fail_timeout=30s;
    
    # Use least_conn for better distribution of HTTP requests
    least_conn;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=websocket_limit:10m rate=30r/m;
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=frontend_limit:10m rate=200r/m;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

server {
    listen 80;
    server_name testnet.nearacles.com localhost;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Connection limits
    limit_conn conn_limit_per_ip 20;
    
    # WebSocket proxy configuration
    location /ws {
        # Rate limiting for WebSocket connections
        limit_req zone=websocket_limit burst=10 nodelay;
        
        proxy_pass http://websocket_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket specific timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 3600s; # 1 hour for long-running connections
        
        # Buffer settings for WebSocket
        proxy_buffering off;
        proxy_cache off;
        
        # Health check
        proxy_next_upstream error timeout http_502 http_503 http_504;
    }
    
    # API endpoints (if any backend APIs are needed)
    location /api/ {
        limit_req zone=api_limit burst=20 nodelay;
        
        # For now, return 404 as we're focusing on WebSocket communication
        return 404 '{"error": "API endpoints not implemented in testnet"}';
        add_header Content-Type application/json;
    }
    
    # Health check endpoint for load balancer
    location /health {
        access_log off;
        return 200 '{"status":"healthy","timestamp":"$time_iso8601","server":"$hostname"}';
        add_header Content-Type application/json;
    }
    
    # Frontend application
    location / {
        limit_req zone=frontend_limit burst=50 nodelay;
        
        proxy_pass http://frontend_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Frontend timeouts
        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_read_timeout 30s;
        
        # Caching for static assets
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://frontend_backend;
            proxy_cache_valid 200 1h;
            expires 1h;
            add_header Cache-Control "public, immutable";
        }
    }
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}

# HTTPS configuration (for production deployment)
server {
    listen 443 ssl http2;
    server_name testnet.nearacles.com;
    
    # SSL configuration (certificates should be provided)
    # ssl_certificate /etc/nginx/ssl/testnet.nearacles.com.crt;
    # ssl_certificate_key /etc/nginx/ssl/testnet.nearacles.com.key;
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    # ssl_prefer_server_ciphers off;
    
    # Redirect to HTTP for testnet (remove in production)
    return 301 http://$server_name$request_uri;
}

# Global nginx settings for performance
client_max_body_size 10M;
client_body_timeout 12;
client_header_timeout 12;
keepalive_timeout 15;
send_timeout 10;

# Logging
access_log /var/log/nginx/testnet_access.log;
error_log /var/log/nginx/testnet_error.log;